// Generated by CoffeeScript 1.10.0
(function() {
  var App, DomMask, MaskGroup, PreviewList, PreviewListItem, init,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  App = {};

  chrome.extension.onMessage.addListener(function(data, sender, callback) {
    var tm;
    if (App.inited) {
      return;
    }
    App.inited = true;
    if (data === "init") {
      tm = new Leaf.TemplateManager();
      tm.baseUrl = chrome.extension.getURL("template") + "/";
      tm.use("welcome-hint", "preview-list");
      tm.start();
      return tm.on("ready", (function(_this) {
        return function(templates) {
          App.templates = templates;
          return init();
        };
      })(this));
    }
  });

  init = function() {
    var i, item, items, len, welcomeHint;
    items = document.getElementsByTagName("*");
    for (i = 0, len = items.length; i < len; i++) {
      item = items[i];
      $(item).mousemove(function() {
        App.mouseMask.attachTo(this);
        App.mouseMask.show();
        return false;
      });
      $(item).click(function(e) {
        var groups;
        groups = App.selector.select(this);
        App.previewList.choose(groups);
        return false;
      });
    }
    welcomeHint = new Leaf.Widget(App.templates["welcome-hint"]);
    welcomeHint.appendTo(document.body);
    welcomeHint.node$.show();
    App.selector = new RssSelector();
    App.mouseMask = new DomMask();
    App.maskGroup = new MaskGroup();
    App.previewList = new PreviewList();
    App.previewList.appendTo(document.body);
    App.previewList.hide();
    return App.previewList.__callback = function(result) {
      if (!result) {
        return;
      }
      return console.log("result", result);
    };
  };

  MaskGroup = (function(superClass) {
    extend(MaskGroup, superClass);

    function MaskGroup() {
      this.items = [];
    }

    MaskGroup.prototype.add = function(item) {
      this.items.push(item);
      return item.show();
    };

    MaskGroup.prototype.clear = function() {
      var i, item, len, ref;
      ref = this.items;
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        item.hide();
      }
      return this.items.length = 0;
    };

    return MaskGroup;

  })(Leaf.EventEmitter);

  DomMask = (function(superClass) {
    extend(DomMask, superClass);

    function DomMask(node, style) {
      this.style = style;
      DomMask.__super__.constructor.call(this, "<div class='dom-mask'></div>");
      if (node) {
        this.attachTo(node);
      }
    }

    DomMask.prototype.attachTo = function(node) {
      var offset;
      this.target = node;
      this.target$ = $(node);
      this.node$.width(this.target$.outerWidth());
      this.node$.height(this.target$.outerHeight());
      offset = this.target$.offset();
      if (node.style.display === "none") {
        offset.top = -99999;
      }
      this.node$.css({
        top: offset.top,
        left: offset.left
      });
      if (this.style) {
        return this.node$.css(this.style);
      }
    };

    DomMask.prototype.show = function() {
      return this.appendTo(document.body);
    };

    DomMask.prototype.hide = function() {
      return this.remove();
    };

    return DomMask;

  })(Leaf.Widget);

  PreviewList = (function(superClass) {
    extend(PreviewList, superClass);

    function PreviewList() {
      PreviewList.__super__.constructor.call(this, App.templates["preview-list"]);
      this.list = Leaf.Widget.makeList(this.UI.container);
      this.node.oncontextmenu = (function(_this) {
        return function() {
          _this.hide();
          return false;
        };
      })(this);
    }

    PreviewList.prototype.preview = function(group) {
      var i, item, j, len, len1, ref, ref1, results;
      App.maskGroup.clear();
      ref = group.children;
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        App.maskGroup.add(new DomMask(item, {
          "background-color": "blue"
        }));
      }
      this.list.length = 0;
      ref1 = group.children;
      results = [];
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        item = ref1[j];
        results.push(this.list.push(new PreviewListItem(item.outerHTML)));
      }
      return results;
    };

    PreviewList.prototype.choose = function(groups) {
      this.candidates = groups;
      this.currentGroupIndex = 0;
      this.preview(groups[this.currentGroupIndex]);
      extractGroupCharactor(groups[0]);
      return this.show();
    };

    PreviewList.prototype.show = function() {
      return this.node$.show();
    };

    PreviewList.prototype.hide = function() {
      return this.node$.hide();
    };

    PreviewList.prototype.onClickConfirm = function() {
      return this.__callback(this.__data);
    };

    PreviewList.prototype.onClickCancel = function() {
      return this.__callback(null);
    };

    return PreviewList;

  })(Leaf.Widget);

  PreviewListItem = (function(superClass) {
    extend(PreviewListItem, superClass);

    function PreviewListItem(content) {
      PreviewListItem.__super__.constructor.call(this, "<div class='preview-list-item'></div>");
      if (content) {
        this.setContent(content);
      }
    }

    PreviewListItem.prototype.setContent = function(content) {
      content = sanitizer.sanitize(content);
      return this.node$.html(content);
    };

    return PreviewListItem;

  })(Leaf.Widget);

}).call(this);
